test('addToCart should add product to cart with quantity 1 if it does not exist in cart', () => {
  const product = { id: 1, name: 'Product 1' }

  const initialState = { cart: [] }
  const expectedState = { cart: [{ ...product, quantity: 1 }] }

  const { result } = renderHook(() => useStore())
  act(() => {
    result.current.addToCart(product)
  })

  expect(result.current.state).toEqual(expectedState)
})

test('addToCart should increase quantity of existing product in cart by 1', () => {
  const product = { id: 1, name: 'Product 1' }

  const initialState = { cart: [{ id: 1, name: 'Product 1', quantity: 1 }] }
  const expectedState = { cart: [{ id: 1, name: 'Product 1', quantity: 2 }] }

  const { result } = renderHook(() => useStore())
  act(() => {
    result.current.addToCart(product)
  })

  expect(result.current.state).toEqual(expectedState)
})